# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Roman Chang
Student ID: 303567574
Email: changr@ucla.edu

# Partner 2 (if you're working in a team)
Name: Aniket Das
Student ID: 803532544
Email: aniket.das89@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

The main function forks off a child process for each download and upload.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

A buffer overrun occurs when receiving a file request; the file name
maybe be longer than the buffer size, and will overwrite task.filename.
Since osppeer uses osp2p_vsnscanf to copy the filename, some check must
be made, either in osp2p_vsnscanf or before calling it, which makes sure
the file name does not exceed the buffer size.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

We now only return files in our current directory and only files which we
have registered with the tracker.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

The first attack is a simple busy wait, which will keep a dumb peer indefinitely
waiting forever. The second attack will send garbage data to the dumb peer
indefinitely. The final attack will send the file as normal, but once it's
completed, it will attempt a denial of service attack by repeatedly requesting that
file from the peer.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
